# **Super Snake Adventure**

## **Game Overview**

*Super Snake Adventure* is a reimagined classic snake game with a modern twist. Navigate your snake through the game board, consuming food to grow longer and increase your score. But bewareâ€”a formidable boss awaits, challenging your skills and reflexes.

### **Key Features**

- **Boss Battles:** Face increasingly challenging bosses that require strategic maneuvering and precise attacks.
- **Power-Ups:** Collect various power-ups for temporary advantages like invincibility, freezing the boss, and enhanced firepower.
- **Bomb Mechanics:** Strategically plant bombs to inflict significant damage on the boss, but use them wisely as your supply is limited.
- **Leaderboard:** Compete with players globally and strive for the highest score on the leaderboard.
- **Intuitive Controls:** Use the arrow keys to control the snake's movement, the spacebar to shoot bullets, and the 'B' key to plant bombs.
- **Dynamic Gameplay:** Experience a thrilling gameplay loop with increasing difficulty and rewarding challenges.
- **Advanced SVG Graphics:** Enjoy high-quality graphics rendered using scalable vector graphics (SVG) for a polished and modern look.
- **Responsive Design:** Play seamlessly on desktops, tablets, and mobile devices.

## **Installation**

1. Clone the repository:
   ```bash
   git clone https://github.com/Benighter/Super-Snake-Adventure.git
   ```
2. Open the `index.html` file in your web browser to start playing.

## **How to Play**

### **Basic Controls**
- **Arrow Keys:** Control the snake's movement (Up, Down, Left, Right).
- **Spacebar:** Shoot bullets at the boss to inflict damage.
- **B Key:** Plant a bomb near the boss (limited supply).
- **X Key:** Activate the currently held power-up.

### **Power-Ups**
- **Invincibility (Yellow):** Grants temporary immunity to collisions.
- **Freeze (Blue):** Immobilizes the boss for a short duration.
- **Triple Shot (Red):** Fires three bullets simultaneously in a spread pattern.
- **Reduce Size 50% (Green):** Reduces the snake's length by 50%, aiding in tight spaces or during boss battles.
- **Reduce Size 80% (Purple):** Reduces the snake's length by 80%, requiring careful maneuvering.
- **Bomb (Orange):** Replenishes your bomb supply.

### **Game Mechanics**
- **Food:** Eating food increases your score and lengthens your snake.
- **Collisions:** Avoid colliding with yourself, the walls, or the boss. The invincibility power-up provides temporary immunity.
- **Boss Battles:** Bosses spawn periodically and become increasingly challenging with each level.
- **Bombs:** Plant bombs strategically to deal significant damage to the boss.
- **Power-Up Spawning:** Power-ups spawn randomly after consuming food, offering various advantages.

### **Leaderboard**
Your score is automatically submitted to the global leaderboard when the game ends.

## **SVG Implementation**

The game uses SVG (Scalable Vector Graphics) for rendering elements like the snake, food, boss, bullets, and power-ups. Benefits include:

- **High-Quality Graphics:** SVGs maintain quality regardless of scaling, ensuring crisp visuals across devices.
- **Small File Size:** SVGs are smaller than raster images, contributing to faster loading times and improved performance.
- **Customization:** Easily manipulate and customize SVGs using CSS or JavaScript, allowing for dynamic changes and animations.

## **Code Structure**

The game's code is well-organized for maintainability and readability. Key functions include:

- `initGame()`: Initializes game variables and sets up the game board.
- `drawSnake()`: Renders the snake using SVG.
- `drawFood()`: Renders the food using SVG.
- `drawBoss()`: Renders the boss using SVG.
- `drawBullets()`: Renders the bullets using SVG.
- `drawPowerUps()`: Renders the power-ups using SVG.
- `moveSnake()`: Updates the snake's position based on the current direction.
- `moveBoss()`: Updates the boss's position relative to the snake's location.
- `moveBullets()`: Updates the positions of the bullets.
- `checkCollision()`: Detects collisions between the snake, food, boss, bullets, and walls.
- `endGame()`: Handles the game over state and updates the leaderboard.
- `spawnPowerUp()`: Randomly generates power-ups on the game board.
- `gameLoopFunction()`: The main game loop that handles game logic and rendering.

## **Future Enhancements**

- **More Power-Ups:** Introduce new power-ups with unique effects to diversify gameplay.
- **Level Design:** Implement different levels with varying layouts and challenges.
- **Sound Effects:** Add sound effects to enhance the gameplay experience.
- **Multiplayer Mode:** Allow players to compete against each other in real-time.

## **Contributing**

Contributions are welcome! If you have suggestions, bug reports, or feature requests, please open an issue or submit a pull request.

## **License**

This project is licensed under the MIT License.
